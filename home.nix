{
  config,
  pkgs,
  ...
}: {
  # Most of this file are generated by `home-manager init`.
  imports = [
    # Here's a example of how to configure zsh with some plugins.
    ./modules/zsh

    # direnv is a shell extension that loads environment variables based on the current directory.
    # default enabled for nix shells.
    ./modules/direnv.nix

    # basic git configuration, with gh credential helper enabled, uncomment to enable.
    ./modules/git.nix
  ];

  nix.settings = {
    # Enable nix-command and flakes, it's required for flakes.
    extra-experimental-features = ["nix-command" "flakes"];
    # follow xdg base dirs to keep home directory clean.
    use-xdg-base-directories = true;
  };

  # Use latest version of nix
  nix.package = pkgs.nixVersions.latest;

  # Home Manager needs a bit of information about you and the paths it should manage.
  home.username = "chenjiahao";
  home.homeDirectory = "/Users/chenjiahao";

  # This value determines the Home Manager release that your configuration is
  # compatible with. This helps avoid breakage when a new Home Manager release
  # introduces backwards incompatible changes.
  #
  # You should not change this value, even if you update Home Manager. If you do
  # want to update the value, then make sure to first check the Home Manager
  # release notes.
  home.stateVersion = "24.05"; # Please read the comment before changing.

  # The home.packages option allows you to install Nix packages into your
  # environment.
  home.packages = with pkgs; [
    # # Add packages here to install them in your home environment.
    # gnused  # There are some differences between BSD and GNU sed.
    # gnumake
    # ripgrep # A faster grep alternative. https://github.com/BurntSushi/ripgrep
    # fd      # A faster find alternative. https://github.com/sharkdp/fd
    # bat     # A cat clone with wings.    https://github.com/sharkdp/bat
    # jq      # command-line JSON processor. https://jqlang.github.io/jq/tutorial/
    # rsync   # Keep rsync up-to-date.

    # # It is sometimes useful to fine-tune packages, for example, by applying
    # # overrides. You can do that directly here, just don't forget the
    # # parentheses. Maybe you want to install Nerd Fonts with a limited number of
    # # fonts?
    # (pkgs.nerdfonts.override { fonts = [ "FantasqueSansMono" ]; })

    # # You can also create simple shell scripts directly inside your
    # # configuration. For example, this adds a command 'my-hello' to your
    # # environment:
    # (pkgs.writeShellScriptBin "my-hello" ''
    #   echo "Hello, ${config.home.username}!"
    # '')
  ];

  # Home Manager is pretty good at managing dotfiles. The primary way to manage
  # plain files is through 'home.file'.
  home.file = {
    # # Building this configuration will create a copy of 'dotfiles/screenrc' in
    # # the Nix store. Activating the configuration will then make '~/.screenrc' a
    # # symlink to the Nix store copy.
    # ".screenrc".source = dotfiles/screenrc;

    # # You can also set the file content immediately.
    # ".gradle/gradle.properties".text = ''
    #   org.gradle.console=verbose
    #   org.gradle.daemon.idletimeout=3600000
    # '';
  };

  # Home Manager can also manage your environment variables through 'home.sessionVariables'.
  # If you already have your shell enabled in home manager config, then you're good to go.
  # For example, if you have one of following in your home.nix (the one you're using):
  # programs.bash.enable = true;
  # programs.zsh.enable = true;
  # programs.fish.enable = true;
  #
  # Otherwise you have to manually source 'hm-session-vars.sh'
  # located at either
  #  ~/.nix-profile/etc/profile.d/hm-session-vars.sh
  # or
  #  ~/.local/state/nix/profiles/profile/etc/profile.d/hm-session-vars.sh
  # or
  #  /etc/profiles/per-user/bear/etc/profile.d/hm-session-vars.sh
  home.sessionVariables = {
    EDITOR = "vim";
  };

  # Let Home Manager install and manage itself.
  programs.home-manager.enable = true;
}
